Reformatting GWAS Summary Statistics to COJO format

Bash

# Input and output file names
INPUT_FILE="input_cojo.txt"
OUTPUT_FILE="formatted_data.txt"

# Set constant N value
N=46351

# Write header to output file
echo -e "SNP\tA1\tA2\tb\tse\tp\tN" > "$OUTPUT_FILE"

# Process the input file, skipping the header
awk -v N="$N" 'NR>1 {
    print $1, $3, $4, log($6), $7, $8, N
}' OFS="\t" "$INPUT_FILE" >> "$OUTPUT_FILE"

echo "Reformatting complete. Output saved to $OUTPUT_FILE."

Impute autism, insomnia and chronotype summary statistics

Bash

Autism

# First, get summary statistics into cojo format
# Tidy
Rscript -e "SBayesRC::tidy(mafile=‘autism_cojo_tab.txt’, LDdir='../ukbEUR_Imputed', output='autism_tidy.ma', log2file=TRUE)"
 
# Impute
Rscript -e "SBayesRC::impute(mafile='autism_tidy.ma', LDdir='../ukbEUR_Imputed', output='autism_imp.ma', log2file=TRUE)"
 
# Run model
 
Rscript -e "SBayesRC::sbayesrc(mafile='autism_imp.ma', LDdir='../ukbEUR_Imputed', outPrefix='autism_tidy_sbrc', annot='../annot_baseline2.2.txt', log2file=TRUE)"

Insomnia

# First, get summary statistics into cojo format
# Tidy
Rscript -e "SBayesRC::tidy(mafile=‘insomnia_cojo_tab.txt’, LDdir='../ukbEUR_Imputed', output='insomnia_tidy.ma', log2file=TRUE)"
 
# Impute
Rscript -e "SBayesRC::impute(mafile='insomnia_tidy.ma', LDdir='../ukbEUR_Imputed', output='insomnia_imp.ma', log2file=TRUE)"
 
# Run model
 
Rscript -e "SBayesRC::sbayesrc(mafile='insomnia_imp.ma', LDdir='../ukbEUR_Imputed', outPrefix='insomnia_tidy_sbrc', annot='../annot_baseline2.2.txt', log2file=TRUE)"

Chronotype

# First, get summary statistics into cojo format
# Tidy
Rscript -e "SBayesRC::tidy(mafile=‘chronotype_cojo_tab.txt’, LDdir='../ukbEUR_Imputed', output='chronotype_tidy.ma', log2file=TRUE)"
 
# Impute
Rscript -e "SBayesRC::impute(mafile='chronotype_tidy.ma', LDdir='../ukbEUR_Imputed', output='chronotype_imp.ma', log2file=TRUE)"
 
# Run model
 
Rscript -e "SBayesRC::sbayesrc(mafile='chronotype_imp.ma', LDdir='../ukbEUR_Imputed', outPrefix='chronotype_tidy_sbrc', annot='../annot_baseline2.2.txt', log2file=TRUE)"

Bash Code (PLINK 2.0)

This code was primarily used for data preparation and quality control of the 1000 Genomes dataset.

Downloading and Converting Data

Bash

# Download 1000 Genomes VCF files
wget ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/*.vcf.gz

# Convert VCF to PLINK format
plink --vcf ALL.chr*.vcf.gz --make-bed --out 1000G
wget: Downloads the VCF (Variant Call Format) files from the 1000 Genomes Project.
plink --vcf ... --make-bed --out 1000G: Converts the downloaded VCF files into PLINK's binary format (.bed, .bim, .fam), which is more efficient for PLINK to work with.
Quality Control

Bash

# Filter SNPs and individuals based on missingness and MAF
plink --bfile 1000G --geno 0.05 --mind 0.05 --maf 0.01 --make-bed --out 1000G_QC

# Perform LD pruning to reduce SNP correlation
plink --bfile 1000G_QC --indep-pairwise 50 5 0.2 --out 1000G_pruned
plink --bfile 1000G_QC --extract 1000G_pruned.prune.in --make-bed --out 1000G_LDpruned
plink --bfile 1000G --geno 0.05 --mind 0.05 --maf 0.01 --make-bed --out 1000G_QC:
--bfile 1000G: Specifies the input PLINK binary files.
--geno 0.05: Removes SNPs with >5% missing genotype data.
--mind 0.05: Removes individuals with >5% missing genotype data.
--maf 0.01: Removes SNPs with a minor allele frequency <1%.
--make-bed: Creates new PLINK binary files with the filtered data.
--out 1000G_QC: Specifies the output file name prefix.
plink --bfile 1000G_QC --indep-pairwise 50 5 0.2 --out 1000G_pruned:
Performs LD (linkage disequilibrium) pruning. LD is the correlation between SNPs. Pruning reduces redundancy in the data.
50 5 0.2: Parameters for the window size, step size, and r^2 threshold for LD pruning.
plink --bfile 1000G_QC --extract 1000G_pruned.prune.in --make-bed --out 1000G_LDpruned:
Creates a new PLINK file with only the SNPs that passed the LD pruning.

Principal Component Analysis (PCA)

Bash

plink --bfile 1000G_LDpruned --pca 10 --out 1000G_PCA
plink --bfile 1000G_LDpruned: Uses the LD-pruned data.
--pca 10: Performs PCA and calculates the top 10 principal components. PCA is used to capture population structure.
--out 1000G_PCA: Specifies the output file name prefix.

Filtering GWAS SNPs

Bash

plink --bfile 1000G_QC --extract <GWAS_SNP_list.txt> --make-bed --out GWAS_SNPs_filtered
plink --bfile 1000G_QC: Uses the QC-ed data.
--extract <GWAS_SNP_list.txt>: Filters the 1000 Genomes data to include only the SNPs present in the GWAS summary statistics. This ensures consistency between the datasets.
--make-bed: Creates new PLINK binary files with the filtered data.
--out GWAS_SNPs_filtered: Specifies the output file name prefix.
Extracting SNP Weights

Bash

awk '{print $2, $4}' Autism_SBayesRC.snpRes > Autism_PGS_weights.txt
awk: A command-line tool for text processing.
This extracts the SNP identifier and effect size (beta) from the SBayesRC output file ("Autism_SBayesRC.snpRes") and saves them into a new file ("Autism_PGS_weights.txt"). These effect sizes are the weights used to calculate the PGS.

Computing PGS

Bash

plink --bfile 1000G_QC \
      --score Autism_PGS_weights.txt 1 2 3 header \
      --out 1000G_Autism_PGS
plink --bfile 1000G_QC: Uses the QC-ed 1000 Genomes data.
--score Autism_PGS_weights.txt 1 2 3 header: Calculates the PGS using the weights from the "Autism_PGS_weights.txt" file. The "1 2 3 header" part specifies the columns in the weights file that contain the SNP ID and weight information.
--out 1000G_Autism_PGS: Specifies the output file name prefix.

R Code

This code was used for data visualization and statistical analysis.

Loading Data

R

library(ggplot2)
pgs_data <- read.table("1000G_Autism_PGS.profile", header=TRUE)
pca_data <- read.table("1000G_PCA.eigenvec", header=FALSE)
colnames(pca_data) <- c("FID", "IID", paste0("PC", 1:10))
library(ggplot2): Loads the ggplot2 package for plotting.
pgs_data <- read.table("1000G_Autism_PGS.profile", header=TRUE): Reads the PGS data from a file.
pca_data <- read.table("1000G_PCA.eigenvec", header=FALSE): Reads the PCA results from a file.
colnames(pca_data) <- c("FID", "IID", paste0("PC", 1:10)): Assigns column names to the PCA data (FID = Family ID, IID = Individual ID, PC1-PC10 = Principal Components).
Merging Data

R

merged_data <- merge(pgs_data, pca_data, by=c("FID", "IID"))
merge(...): Merges the PGS data and PCA data based on the individual identifiers (FID and IID).

Boxplot Visualisation

R

ggplot(merged_data, aes(x=Population, y=SCORE)) +
    geom_boxplot() +
    labs(title="Autism PGS Across Populations", x="Population", y="PGS") +
    theme_minimal()
ggplot(...): Creates a ggplot object.
aes(x=Population, y=SCORE): Sets the x-axis to "Population" and the y-axis to "SCORE" (the PGS column).
geom_boxplot(): Adds a boxplot to the plot.
labs(...): Adds labels to the plot.
theme_minimal(): Applies a minimal theme.

Correlation Test

R

cor.test(merged_data$Autism_SCORE, merged_data$Sleep_SCORE)
cor.test(...): Performs a Pearson correlation test to assess the linear relationship between two PGS scores.
Correlation Matrix Visualization

R

# Create a data frame from correlation results
correlation_data <- data.frame(
  Variable1 = c("Autism PGS", "Autism PGS", "Insomnia PGS"),
  Variable2 = c("Insomnia PGS", "Chronotype PGS", "Chronotype PGS"),
  cor = c(-0.1426087, 0.01881833, -0.00957133),
  p_value = c(2.23e-06, 0.5345, 0.7521)
)

# Add significance labels
correlation_data$significance <- ifelse(correlation_data$p_value < 0.001, "***",
                                      ifelse(correlation_data$p_value < 0.01, "**",
                                             ifelse(correlation_data$p_value < 0.05, "*", "ns")))

# Load necessary library
library(ggplot2)

# Create the correlation matrix visualization
ggplot(data = correlation_data, aes(x = Variable1, y = Variable2, fill = cor)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", 
                      midpoint = 0, limit = c(-1, 1)) +
  geom_text(aes(label = round(cor, 2)), color = "black", size = 4) +
  geom_text(aes(label = significance), y = 0.8, color = "black", size = 6) +
  labs(title = "Correlation Matrix of Polygenic Scores",
       x = "", y = "", fill = "Correlation") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
This code creates a correlation matrix visualization using ggplot2 to display the correlations between different PGS scores.

Linear Regression Graph

R

library(ggplot2)

ggplot(merged_data, aes(x = predict(lm_result), y = `Score Average`)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = paste0("Predicted vs. Observed Autism PGS Scores (R-squared = ", round(summary(lm_result)$r.squared, 4), ")"),
       x = "Autism PGS Predicted by PCs",
       y = "Observed Autism PGS") +
  theme_minimal()
This code generates a scatter plot showing the relationship between predicted and observed Autism PGS scores, with a linear regression line.

Histogram

R

library(ggplot2)

ggplot(merged_data, aes(x = `Score Average`)) +
  geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
  labs(title = "Distribution of Autism PGS",
       x = "Score Average",
       y = "Frequency") +
  theme_minimal()

Scatter Plot

R

library(ggplot2)

ggplot(merged_data, aes(x = PC1, y = PC2, color = `Score Average`)) +
  geom_point(size = 3, alpha = 0.7) +
  labs(title = "PCA of 1000 Genomes with Autism PGS",
       x = "PC1",
       y = "PC2",
       color = "Score Average") +
  scale_color_gradient(low = "blue", high = "red") +
  theme_minimal() +
  geom_smooth(method = "loess", se = FALSE, color = "green")

This code will generate a scatter plot showing the relationship between PC1 and PC2, with the points colored by the "Score Average" (Autism PGS) values and a smoothed line to highlight the general trend.
